{"version":3,"file":"Tooltip.stories-281a6616.js","sources":["../../src/components/Tooltip/useTooltip.ts","../../src/components/Tooltip/Tooltip.tsx"],"sourcesContent":["import {\n  useFloating,\n  autoUpdate,\n  offset,\n  flip,\n  shift,\n  useHover,\n  useFocus,\n  useDismiss,\n  useRole,\n  useInteractions,\n} from '@floating-ui/react';\n\nimport { type Placement } from '@floating-ui/react';\nimport React, { useState } from 'react';\n\nexport interface TooltipOptions {\n  initialOpen?: boolean;\n  placement?: Placement;\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n}\n\nexport function useTooltip({\n  initialOpen = false,\n  placement = 'top',\n  open: controlledOpen,\n  onOpenChange: setControlledOpen,\n}: TooltipOptions = {}) {\n  const [uncontrolledOpen, setUncontrolledOpen] = useState(initialOpen);\n\n  const open = controlledOpen ?? uncontrolledOpen;\n  const setOpen = setControlledOpen ?? setUncontrolledOpen;\n\n  const data = useFloating({\n    placement,\n    open,\n    onOpenChange: setOpen,\n    whileElementsMounted: autoUpdate,\n    middleware: [\n      offset(5),\n      flip({\n        crossAxis: placement.includes('-'),\n        fallbackAxisSideDirection: 'start',\n        padding: 5,\n      }),\n      shift({ padding: 5 }),\n    ],\n  });\n\n  const context = data.context;\n\n  const hover = useHover(context, {\n    move: false,\n    enabled: controlledOpen == null,\n  });\n  const focus = useFocus(context, {\n    enabled: controlledOpen == null,\n  });\n  const dismiss = useDismiss(context);\n  const role = useRole(context, { role: 'tooltip' });\n\n  const interactions = useInteractions([hover, focus, dismiss, role]);\n\n  return React.useMemo(\n    () => ({\n      open,\n      setOpen,\n      ...interactions,\n      ...data,\n    }),\n    [open, setOpen, interactions, data],\n  );\n}\n","import { useMergeRefs, FloatingPortal } from '@floating-ui/react';\n\nimport React, { forwardRef } from 'react';\nimport { useTooltip, TooltipOptions } from './useTooltip';\nimport styled from '@emotion/styled';\n\nconst TooltipContentContainer = styled.div`\n  background-color: #444;\n  color: white;\n  font-size: 90%;\n  padding: 4px 8px;\n  border-radius: 4px;\n  box-sizing: border-box;\n  width: max-content;\n  max-width: calc(100vw - 10px);\n`;\n\ntype ContextType = ReturnType<typeof useTooltip> | null;\n\nconst TooltipContext = React.createContext<ContextType>(null);\n\nexport const useTooltipContext = () => {\n  const context = React.useContext(TooltipContext);\n\n  if (context == null) {\n    throw new Error('Tooltip components must be wrapped in <Tooltip />');\n  }\n\n  return context;\n};\n\nexport function Tooltip({\n  title,\n  children,\n  ...options\n}: {\n  children: React.ReactNode;\n  title: string;\n} & TooltipOptions) {\n  return (\n    <BaseTooltip {...options}>\n      <TooltipTrigger asChild>{children}</TooltipTrigger>\n      <TooltipContent>{title}</TooltipContent>\n    </BaseTooltip>\n  );\n}\n\nfunction BaseTooltip({\n  children,\n  ...options\n}: { children: React.ReactNode } & TooltipOptions) {\n  // This can accept any props as options, e.g. `placement`,\n  // or other positioning options.\n  const tooltip = useTooltip(options);\n  return (\n    <TooltipContext.Provider value={tooltip}>\n      {children}\n    </TooltipContext.Provider>\n  );\n}\n\nconst TooltipTrigger = forwardRef<\n  HTMLElement,\n  React.HTMLProps<HTMLElement> & { asChild?: boolean }\n>(function TooltipTrigger({ children, asChild = false, ...props }, propRef) {\n  const context = useTooltipContext();\n  const childrenRef = (children as any).ref; // eslint-disable-line\n  const ref = useMergeRefs([context.refs.setReference, propRef, childrenRef]);\n\n  // `asChild` allows the user to pass any element as the anchor\n  if (asChild && React.isValidElement(children)) {\n    return React.cloneElement(\n      children,\n      context.getReferenceProps({\n        ref,\n        ...props,\n        ...children.props,\n        'data-state': context.open ? 'open' : 'closed',\n      }),\n    );\n  }\n\n  return (\n    <button\n      ref={ref}\n      // The user can style the trigger based on the state\n      data-state={context.open ? 'open' : 'closed'}\n      {...context.getReferenceProps(props)}\n    >\n      {children}\n    </button>\n  );\n});\n\nconst TooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLProps<HTMLDivElement>\n>(function TooltipContent({ style, ...props }, propRef) {\n  const context = useTooltipContext();\n  const ref = useMergeRefs([context.refs.setFloating, propRef]);\n\n  if (!context.open) return null;\n\n  return (\n    <FloatingPortal>\n      <TooltipContentContainer\n        ref={ref}\n        style={{\n          ...context.floatingStyles,\n          ...style,\n        }}\n        {...context.getFloatingProps(props)}\n      />\n    </FloatingPortal>\n  );\n});\n"],"names":["useTooltip","initialOpen","placement","open","controlledOpen","onOpenChange","setControlledOpen","uncontrolledOpen","setUncontrolledOpen","useState","setOpen","data","useFloating","whileElementsMounted","autoUpdate","middleware","offset","flip","crossAxis","includes","fallbackAxisSideDirection","padding","shift","context","hover","useHover","move","enabled","focus","useFocus","dismiss","useDismiss","role","useRole","interactions","useInteractions","React","useMemo","TooltipContentContainer","_styled","TooltipContext","useTooltipContext","Tooltip","title","children","jsxs","BaseTooltip","options","jsx","TooltipTrigger","TooltipContent","tooltip","forwardRef","props","propRef","childrenRef","ref","useMergeRefs","asChild","style","FloatingPortal","floatingStyles"],"mappings":"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"}